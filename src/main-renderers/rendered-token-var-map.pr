{*

Injectable blueprint that represents full token as key: value to be used inside :root {} declarations.

Source data: Token Metadata and Payload, all types (https://developers.supernova.io/design-system-data/tokens)
Note: Token is passed as `context` property because it is injected

{
  "context": {
    "id": string
    "name": string
    "description": string
    "tokenType": Depends on the token type
    "origin": ItemOrigin | null
    "value": Depends on the token type
  }
}


Rendered as:

  --[name]: [value];

*}
{[ let tokens = context /]}
{[ for token in tokens ]}
  {[ inject "rendered-description" context token /]}
  ${[ inject "rendered-name" context token /]}: {[ inject "rendered-value" context token /]} !default;
    

{[/]}
{[ if tokens.count() > 0 ]}
  {[ let mapName = "" /]}
  {[ switch tokens[0].tokenType ]}
  {[ case "Color" ]}{[ mapName = mapNames.colorMapName /]}
  {[ case "Typography" ]}{[ mapName = mapNames.typographyMapName /]}  
  {[ case "Shadow" ]}{[ mapName = mapNames.shadowMapName /]}  
  {[ case "Border" ]}{[ mapName = mapNames.borderMapName /]}  
  {[ case "Measure" ]}{[ mapName = mapNames.measureMapName /]}  
  {[ case "Gradient" ]}{[ mapName = mapNames.gradientMapName /]}  
  {[ default ]}{[ mapName = "" /]}  
  {[/]}


  {[ if mapName ]}
    ${{ mapName }}: (
      {[ for token in tokens ]}
        {[ inject "rendered-name" context token /]}: {[ inject "rendered-value" context token /]} !default,


      {[/]}
    ) 
  {[/]}
{[/]}